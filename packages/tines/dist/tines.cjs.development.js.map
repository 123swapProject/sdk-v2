{"version":3,"file":"tines.cjs.development.js","sources":["../src/MultiRouterTypes.ts","../src/MultiRouterMath.ts","../src/MultiRouter.ts"],"sourcesContent":["import { BigNumber } from \"@ethersproject/bignumber\";\n\nexport interface RToken {\n  name: string;\n  address: string;\n}\n\nexport enum PoolType {\n  ConstantProduct = \"ConstantProduct\",\n  Weighted = \"Weighted\",\n  Hybrid = \"Hybrid\",\n  ConcentratedLiquidity = \"ConcentratedLiquidity\",\n}\n\nexport interface PoolInfo {\n  address: string;\n  token0: RToken;\n  token1: RToken;\n  type: PoolType;\n  reserve0: BigNumber;\n  reserve1: BigNumber;\n  fee: number;\n  minLiquidity: number;\n  swapGasCost: number;\n}\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\ntype PoolInfoWithDefaults = PartialBy<PoolInfo, \"minLiquidity\" | \"swapGasCost\">;\n\nexport class Pool {\n  address: string;\n  token0: RToken;\n  token1: RToken;\n  type: PoolType;\n  reserve0: BigNumber;\n  reserve1: BigNumber;\n  fee: number;\n  minLiquidity: number;\n  swapGasCost: number;\n\n  constructor(_info: PoolInfoWithDefaults) {\n    const info = {\n      minLiquidity: 1000,\n      swapGasCost: 40_000,\n      ..._info,\n    };\n    this.address = info.address;\n    this.token0 = info.token0;\n    this.token1 = info.token1;\n    this.type = info.type;\n    this.reserve0 = info.reserve0;\n    this.reserve1 = info.reserve1;\n    this.fee = info.fee;\n    this.minLiquidity = info.minLiquidity;\n    this.swapGasCost = info.swapGasCost;\n  }\n}\n\ntype PoolInfoNoType = Omit<PoolInfoWithDefaults, \"type\">;\n\nexport class RConstantProductPool extends Pool {\n  constructor(info: PoolInfoNoType) {\n    super({\n      type: PoolType.ConstantProduct,\n      ...info,\n    });\n  }\n}\n\ntype HybridPoolInfo = PoolInfoNoType & { A: number };\n\nexport class RHybridPool extends Pool {\n  A: number;\n  constructor(info: HybridPoolInfo) {\n    super({\n      type: PoolType.Hybrid,\n      ...info,\n    });\n    this.A = info.A;\n  }\n}\n\ntype WeightedPoolInfo = PoolInfoNoType & { weight0: number; weight1: number };\n\nexport class RWeightedPool extends Pool {\n  weight0: number;\n  weight1: number;\n  constructor(info: WeightedPoolInfo) {\n    super({\n      type: PoolType.Weighted,\n      ...info,\n    });\n    this.weight0 = info.weight0;\n    this.weight1 = info.weight1;\n  }\n}\n\nexport const CL_MIN_TICK = -887272;\nexport const CL_MAX_TICK = -CL_MIN_TICK - 1;\ninterface CLTick {\n  index: number;\n  DLiquidity: number;\n}\n\ninterface CLSpecific {\n  liquidity: number;\n  sqrtPrice: number;\n  nearestTick: number;\n  ticks: CLTick[];\n}\n\ntype CLPoolInfo = Omit<PoolInfoNoType, \"reserve0\" | \"reserve1\"> & CLSpecific;\n\nexport class RConcentratedLiquidityPool extends Pool {\n  liquidity: number;\n  sqrtPrice: number;\n  nearestTick: number;\n  ticks: CLTick[];\n  constructor(info: CLPoolInfo) {\n    super({\n      type: PoolType.ConcentratedLiquidity,\n      reserve0: BigNumber.from(0),\n      reserve1: BigNumber.from(0),\n      ...info,\n    });\n    this.liquidity = info.liquidity;\n    this.sqrtPrice = info.sqrtPrice;\n    this.nearestTick = info.nearestTick;\n    this.ticks = info.ticks;\n  }\n}\n\nexport interface RouteLeg {\n  address: string;\n  token: RToken;\n  swapPortion: number; // For router contract\n  absolutePortion: number; // To depict at webpage for user\n}\n\nexport enum RouteStatus {\n  Success = \"Success\",\n  NoWay = \"NoWay\",\n  Partial = \"Partial\",\n}\nexport interface MultiRoute {\n  status: RouteStatus;\n  amountIn: number;\n  amountOut: number;\n  legs: RouteLeg[];\n  gasSpent: number;\n  totalAmountOut: number;\n}\n","import {\n  CL_MAX_TICK,\n  CL_MIN_TICK,\n  Pool,\n  PoolType,\n  RConcentratedLiquidityPool,\n  RHybridPool,\n  RWeightedPool,\n} from \"./MultiRouterTypes\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\n\nconst A_PRECISION = 100;\n\nconst DCacheBN = new Map<Pool, BigNumber>();\nexport function HybridComputeLiquidity(pool: RHybridPool): BigNumber {\n  const res = DCacheBN.get(pool);\n  if (res !== undefined) return res;\n\n  const r0 = pool.reserve0;\n  const r1 = pool.reserve1;\n\n  if (r0.isZero() && r1.isZero()) {\n    DCacheBN.set(pool, BigNumber.from(0));\n    return BigNumber.from(0);\n  }\n  const s = r0.add(r1);\n\n  const nA = BigNumber.from(pool.A * 2);\n\n  let prevD;\n\n  let D = s;\n  for (let i = 0; i < 256; i++) {\n    const dP = D.mul(D).div(r0).mul(D).div(r1).div(4);\n    prevD = D;\n    D = nA\n      .mul(s)\n      .div(A_PRECISION)\n      .add(dP.mul(2))\n      .mul(D)\n      .div(nA.div(A_PRECISION).sub(1).mul(D).add(dP.mul(3)));\n    if (D.sub(prevD).abs().lte(1)) {\n      break;\n    }\n  }\n  DCacheBN.set(pool, D);\n  return D;\n}\n\nexport function HybridgetY(pool: RHybridPool, x: BigNumber): BigNumber {\n  const D = HybridComputeLiquidity(pool);\n\n  const nA = pool.A * 2;\n\n  let c = D.mul(D)\n    .div(x.mul(2))\n    .mul(D)\n    .div((nA * 2) / A_PRECISION);\n  let b = D.mul(A_PRECISION).div(nA).add(x);\n\n  let yPrev;\n  let y = D;\n  for (let i = 0; i < 256; i++) {\n    yPrev = y;\n\n    y = y.mul(y).add(c).div(y.mul(2).add(b).sub(D));\n    if (y.sub(yPrev).abs().lte(1)) {\n      break;\n    }\n  }\n  return y;\n}\n\nexport function calcOutByIn(\n  pool: Pool,\n  amountIn: number,\n  direction = true\n): number {\n  const xBN = direction ? pool.reserve0 : pool.reserve1;\n  const yBN = direction ? pool.reserve1 : pool.reserve0;\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString());\n      const y = parseInt(yBN.toString());\n      return (y * amountIn) / (x / (1 - pool.fee) + amountIn);\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString());\n      const y = parseInt(yBN.toString());\n      const wPool = pool as RWeightedPool;\n      const weightRatio = direction\n        ? wPool.weight0 / wPool.weight1\n        : wPool.weight1 / wPool.weight0;\n      const actualIn = amountIn * (1 - pool.fee);\n      const out = y * (1 - Math.pow(x / (x + actualIn), weightRatio));\n      return out;\n    }\n    case PoolType.Hybrid: {\n      // const xNew = x + amountIn*(1-pool.fee);\n      // const yNew = HybridgetY(pool, xNew);\n      // const dy = y - yNew;\n\n      const xNewBN = xBN.add(\n        getBigNumber(undefined, amountIn * (1 - pool.fee))\n      );\n      const yNewBN = HybridgetY(pool as RHybridPool, xNewBN);\n      const dy = parseInt(yBN.sub(yNewBN).toString());\n\n      return dy;\n    }\n    case PoolType.ConcentratedLiquidity: {\n      return ConcentratedLiquidityOutByIn(\n        pool as RConcentratedLiquidityPool,\n        amountIn,\n        direction\n      );\n    }\n  }\n}\n\nexport class OutOfLiquidity extends Error {}\n\nfunction ConcentratedLiquidityOutByIn(\n  pool: RConcentratedLiquidityPool,\n  inAmount: number,\n  direction: boolean\n) {\n  if (pool.ticks.length === 0) return 0;\n  if (pool.ticks[0].index > CL_MIN_TICK)\n    pool.ticks.unshift({ index: CL_MIN_TICK, DLiquidity: 0 });\n  if (pool.ticks[pool.ticks.length - 1].index < CL_MAX_TICK)\n    pool.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 });\n\n  let nextTickToCross = direction ? pool.nearestTick : pool.nearestTick + 1;\n  let currentPrice = pool.sqrtPrice;\n  let currentLiquidity = pool.liquidity;\n  let outAmount = 0;\n  let input = inAmount;\n\n  while (input > 0) {\n    if (nextTickToCross < 0 || nextTickToCross >= pool.ticks.length)\n      throw new OutOfLiquidity();\n\n    const nextTickPrice = Math.sqrt(\n      Math.pow(1.0001, pool.ticks[nextTickToCross].index)\n    );\n    // console.log('L, P, tick, nextP', currentLiquidity,\n    //     currentPrice, pool.ticks[nextTickToCross].index, nextTickPrice);\n    let output = 0;\n\n    if (direction) {\n      const maxDx =\n        (currentLiquidity * (currentPrice - nextTickPrice)) /\n        currentPrice /\n        nextTickPrice;\n      //console.log('input, maxDx', input, maxDx);\n\n      if (input <= maxDx) {\n        output =\n          (currentLiquidity * currentPrice * input) /\n          (input + currentLiquidity / currentPrice);\n        input = 0;\n      } else {\n        output = currentLiquidity * (currentPrice - nextTickPrice);\n        currentPrice = nextTickPrice;\n        input -= maxDx;\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity;\n        } else {\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity;\n        }\n        nextTickToCross--;\n      }\n    } else {\n      const maxDy = currentLiquidity * (nextTickPrice - currentPrice);\n      //console.log('input, maxDy', input, maxDy);\n      if (input <= maxDy) {\n        output =\n          input / currentPrice / (currentPrice + input / currentLiquidity);\n        input = 0;\n      } else {\n        output =\n          (currentLiquidity * (nextTickPrice - currentPrice)) /\n          currentPrice /\n          nextTickPrice;\n        currentPrice = nextTickPrice;\n        input -= maxDy;\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity;\n        } else {\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity;\n        }\n        nextTickToCross++;\n      }\n    }\n\n    outAmount += output * (1 - pool.fee);\n    //console.log('out', outAmount);\n  }\n\n  return outAmount;\n}\n\nexport function calcInByOut(\n  pool: Pool,\n  amountOut: number,\n  direction: boolean\n): number {\n  let input = 0;\n  const xBN = direction ? pool.reserve0 : pool.reserve1;\n  const yBN = direction ? pool.reserve1 : pool.reserve0;\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString());\n      const y = parseInt(yBN.toString());\n      input = (x * amountOut) / (1 - pool.fee) / (y - amountOut);\n      break;\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString());\n      const y = parseInt(yBN.toString());\n      const wPool = pool as RWeightedPool;\n      const weightRatio = direction\n        ? wPool.weight0 / wPool.weight1\n        : wPool.weight1 / wPool.weight0;\n      input =\n        x * (1 - pool.fee) * (Math.pow(1 - amountOut / y, -weightRatio) - 1);\n      break;\n    }\n    case PoolType.Hybrid: {\n      let yNewBN = yBN.sub(getBigNumber(undefined, amountOut));\n      if (yNewBN.lt(1))\n        // lack of precision\n        yNewBN = BigNumber.from(1);\n\n      const xNewBN = HybridgetY(pool as RHybridPool, yNewBN);\n      input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - pool.fee));\n\n      // const yNew = y - amountOut;\n      // const xNew = HybridgetY(pool, yNew);\n      // input = (xNew - x)/(1-pool.fee);\n      break;\n    }\n    default:\n      console.error(\"Unknown pool type\");\n  }\n\n  // ASSERT(() => {\n  //   const amount2 = calcOutByIn(pool, input, direction);\n  //   const res = closeValues(amountOut, amount2, 1e-6);\n  //   if (!res) console.log(\"Error 138:\", amountOut, amount2, Math.abs(amountOut/amount2 - 1));\n  //   return res;\n  // });\n  if (input < 1) input = 1;\n  return input;\n}\n\nexport function calcPrice(\n  pool: Pool,\n  amountIn: number,\n  takeFeeIntoAccount = true\n): number {\n  const r0 = parseInt(pool.reserve0.toString());\n  const r1 = parseInt(pool.reserve1.toString());\n  const oneMinusFee = takeFeeIntoAccount ? 1 - pool.fee : 1;\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = r0 / oneMinusFee;\n      return (r1 * x) / (x + amountIn) / (x + amountIn);\n    }\n    case PoolType.Weighted: {\n      const wPool = pool as RWeightedPool;\n      const weightRatio = wPool.weight0 / wPool.weight1;\n      const x = r0 + amountIn * oneMinusFee;\n      return (\n        (r1 * weightRatio * oneMinusFee * Math.pow(r0 / x, weightRatio)) / x\n      );\n    }\n    case PoolType.Hybrid: {\n      const hPool = pool as RHybridPool;\n      const D = parseInt(HybridComputeLiquidity(hPool).toString());\n      const A = hPool.A / A_PRECISION;\n      const x = r0 + amountIn;\n      const b = 4 * A * x + D - 4 * A * D;\n      const ac4 = (D * D * D) / x;\n      const Ds = Math.sqrt(b * b + 4 * A * ac4);\n      const res = (0.5 - (2 * b - ac4 / x) / Ds / 4) * oneMinusFee;\n      return res;\n    }\n  }\n  return 0;\n}\n\nfunction calcInputByPriceConstantMean(pool: RWeightedPool, price: number) {\n  const r0 = parseInt(pool.reserve0.toString());\n  const r1 = parseInt(pool.reserve1.toString());\n  const weightRatio = pool.weight0 / pool.weight1;\n  const t =\n    r1 * price * weightRatio * (1 - pool.fee) * Math.pow(r0, weightRatio);\n  return (Math.pow(t, 1 / (weightRatio + 1)) - r0) / (1 - pool.fee);\n}\n\nexport function calcInputByPrice(\n  pool: Pool,\n  priceEffective: number,\n  hint = 1\n): number {\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const r0 = parseInt(pool.reserve0.toString());\n      const r1 = parseInt(pool.reserve1.toString());\n      const x = r0 / (1 - pool.fee);\n      const res = Math.sqrt(r1 * x * priceEffective) - x;\n      return res;\n    }\n    case PoolType.Weighted: {\n      const res = calcInputByPriceConstantMean(\n        pool as RWeightedPool,\n        priceEffective\n      );\n      return res;\n    }\n    case PoolType.Hybrid: {\n      return revertPositive(\n        (x: number) => 1 / calcPrice(pool, x),\n        priceEffective,\n        hint\n      );\n    }\n  }\n  return 0;\n}\n\n//================================= Utils ====================================\n\nexport function ASSERT(f: () => boolean, t?: string) {\n  if (!f() && t) console.error(t);\n}\n\nexport function closeValues(a: number, b: number, accuracy: number): boolean {\n  if (accuracy === 0) return a === b;\n  if (a < 1 / accuracy) return Math.abs(a - b) <= 10;\n  return Math.abs(a / b - 1) < accuracy;\n}\n\nexport function calcSquareEquation(\n  a: number,\n  b: number,\n  c: number\n): [number, number] {\n  const D = b * b - 4 * a * c;\n  console.assert(D >= 0, `Discriminant is negative! ${a} ${b} ${c}`);\n  const sqrtD = Math.sqrt(D);\n  return [(-b - sqrtD) / 2 / a, (-b + sqrtD) / 2 / a];\n}\n\n// returns such x > 0 that f(x) = out or 0 if there is no such x or f defined not everywhere\n// hint - approximation of x to spead up the algorithm\n// f assumed to be continues monotone growth function defined everywhere\nexport function revertPositive(\n  f: (x: number) => number,\n  out: number,\n  hint = 1\n) {\n  try {\n    if (out <= f(0)) return 0;\n    let min, max;\n    if (f(hint) > out) {\n      min = hint / 2;\n      while (f(min) > out) min /= 2;\n      max = min * 2;\n    } else {\n      max = hint * 2;\n      while (f(max) < out) max *= 2;\n      min = max / 2;\n    }\n\n    while (max / min - 1 > 1e-4) {\n      const x0: number = (min + max) / 2;\n      const y0 = f(x0);\n      if (out === y0) return x0;\n      if (out < y0) max = x0;\n      else min = x0;\n    }\n    return (min + max) / 2;\n  } catch (e) {\n    return 0;\n  }\n}\n\nexport function getBigNumber(\n  valueBN: BigNumber | undefined,\n  value: number\n): BigNumber {\n  if (valueBN !== undefined) return valueBN;\n\n  if (value < Number.MAX_SAFE_INTEGER) return BigNumber.from(Math.round(value));\n\n  const exp = Math.floor(Math.log(value) / Math.LN2);\n  console.assert(exp >= 51, \"Internal Error 314\");\n  const shift = exp - 51;\n  const mant = Math.round(value / Math.pow(2, shift));\n  const res = BigNumber.from(mant).mul(BigNumber.from(2).pow(shift));\n  return res;\n}\n","import {\n  ASSERT,\n  calcInByOut,\n  calcOutByIn,\n  calcPrice,\n  closeValues,\n} from \"./MultiRouterMath\";\nimport {\n  MultiRoute,\n  Pool,\n  RToken,\n  RouteLeg,\n  RouteStatus,\n} from \"./MultiRouterTypes\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\n\nexport class Edge {\n  readonly GasConsumption = 40_000;\n  readonly MINIMUM_LIQUIDITY = 1000;\n  pool: Pool;\n  vert0: Vertice;\n  vert1: Vertice;\n\n  canBeUsed: boolean;\n  direction: boolean;\n  amountInPrevious: number; // How many liquidity were passed from vert0 to vert1\n  amountOutPrevious: number; // How many liquidity were passed from vert0 to vert1\n  bestEdgeIncome: number; // debug data\n\n  constructor(p: Pool, v0: Vertice, v1: Vertice) {\n    this.pool = p;\n    this.vert0 = v0;\n    this.vert1 = v1;\n    this.amountInPrevious = 0;\n    this.amountOutPrevious = 0;\n    this.canBeUsed = true;\n    this.direction = true;\n    this.bestEdgeIncome = 0;\n  }\n\n  reserve(v: Vertice): BigNumber {\n    return v === this.vert0 ? this.pool.reserve0 : this.pool.reserve1;\n  }\n\n  calcOutput(v: Vertice, amountIn: number) {\n    const pool = this.pool;\n    let out,\n      gas = this.amountInPrevious ? 0 : this.GasConsumption;\n    if (v === this.vert1) {\n      if (this.direction) {\n        if (amountIn < this.amountOutPrevious) {\n          out =\n            this.amountInPrevious -\n            calcInByOut(pool, this.amountOutPrevious - amountIn, true);\n        } else {\n          out =\n            calcOutByIn(pool, amountIn - this.amountOutPrevious, false) +\n            this.amountInPrevious;\n        }\n        if (amountIn === this.amountOutPrevious) {\n          // TODO: accuracy?\n          gas = -this.GasConsumption;\n        }\n      } else {\n        out =\n          calcOutByIn(pool, this.amountOutPrevious + amountIn, false) -\n          this.amountInPrevious;\n      }\n    } else {\n      if (this.direction) {\n        out =\n          calcOutByIn(pool, this.amountInPrevious + amountIn, true) -\n          this.amountOutPrevious;\n      } else {\n        if (amountIn === this.amountInPrevious) {\n          // TODO: accuracy?\n          gas = -this.GasConsumption;\n        }\n        if (amountIn < this.amountInPrevious) {\n          out =\n            this.amountOutPrevious -\n            calcInByOut(pool, this.amountInPrevious - amountIn, false);\n        } else {\n          out =\n            calcOutByIn(pool, amountIn - this.amountInPrevious, true) +\n            this.amountOutPrevious;\n        }\n      }\n    }\n\n    // this.testApply(v, amountIn, out);\n\n    return [out, gas];\n  }\n\n  checkMinimalLiquidityExceededAfterSwap(\n    from: Vertice,\n    amountOut: number\n  ): boolean {\n    if (from === this.vert0) {\n      const r1 = parseInt(this.pool.reserve1.toString());\n      if (this.direction) {\n        return r1 - amountOut - this.amountOutPrevious < this.MINIMUM_LIQUIDITY;\n      } else {\n        return r1 - amountOut + this.amountOutPrevious < this.MINIMUM_LIQUIDITY;\n      }\n    } else {\n      const r0 = parseInt(this.pool.reserve0.toString());\n      if (this.direction) {\n        return r0 - amountOut + this.amountInPrevious < this.MINIMUM_LIQUIDITY;\n      } else {\n        return r0 - amountOut - this.amountInPrevious < this.MINIMUM_LIQUIDITY;\n      }\n    }\n  }\n\n  // doesn't used in production - just for testing\n  testApply(from: Vertice, amountIn: number, amountOut: number) {\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0);\n    const inPrev = this.direction\n      ? this.amountInPrevious\n      : -this.amountInPrevious;\n    const outPrev = this.direction\n      ? this.amountOutPrevious\n      : -this.amountOutPrevious;\n    const to = from.getNeibour(this);\n    let directionNew,\n      amountInNew = 0,\n      amountOutNew = 0;\n    if (to) {\n      const inInc = from === this.vert0 ? amountIn : -amountOut;\n      const outInc = from === this.vert0 ? amountOut : -amountIn;\n      const inNew = inPrev + inInc;\n      const outNew = outPrev + outInc;\n      if (inNew * outNew < 0) console.log(\"333\");\n      console.assert(inNew * outNew >= 0);\n      if (inNew >= 0) {\n        directionNew = true;\n        amountInNew = inNew;\n        amountOutNew = outNew;\n      } else {\n        directionNew = false;\n        amountInNew = -inNew;\n        amountOutNew = -outNew;\n      }\n    } else console.error(\"Error 221\");\n\n    if (directionNew) {\n      const calc = calcOutByIn(this.pool, amountInNew, directionNew);\n      const res = closeValues(amountOutNew, calc, 1e-6);\n      if (!res)\n        console.log(\n          \"Err 225-1 !!\",\n          amountOutNew,\n          calc,\n          Math.abs(calc / amountOutNew - 1)\n        );\n      return res;\n    } else {\n      const calc = calcOutByIn(this.pool, amountOutNew, directionNew);\n      const res = closeValues(amountInNew, calc, 1e-6);\n      if (!res)\n        console.log(\n          \"Err 225-2!!\",\n          amountInNew,\n          calc,\n          Math.abs(calc / amountInNew - 1)\n        );\n      return res;\n    }\n  }\n\n  applySwap(from: Vertice) {\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0);\n    const inPrev = this.direction\n      ? this.amountInPrevious\n      : -this.amountInPrevious;\n    const outPrev = this.direction\n      ? this.amountOutPrevious\n      : -this.amountOutPrevious;\n    const to = from.getNeibour(this);\n    if (to) {\n      const inInc = from === this.vert0 ? from.bestIncome : -to.bestIncome;\n      const outInc = from === this.vert0 ? to.bestIncome : -from.bestIncome;\n      const inNew = inPrev + inInc;\n      const outNew = outPrev + outInc;\n      console.assert(inNew * outNew >= 0);\n      if (inNew >= 0) {\n        this.direction = true;\n        this.amountInPrevious = inNew;\n        this.amountOutPrevious = outNew;\n      } else {\n        this.direction = false;\n        this.amountInPrevious = -inNew;\n        this.amountOutPrevious = -outNew;\n      }\n    } else console.error(\"Error 221\");\n\n    ASSERT(() => {\n      if (this.direction)\n        return closeValues(\n          this.amountOutPrevious,\n          calcOutByIn(this.pool, this.amountInPrevious, this.direction),\n          1e-6\n        );\n      else {\n        return closeValues(\n          this.amountInPrevious,\n          calcOutByIn(this.pool, this.amountOutPrevious, this.direction),\n          1e-6\n        );\n      }\n    }, `Error 225`);\n  }\n}\n\nexport class Vertice {\n  token: RToken;\n  edges: Edge[];\n\n  price: number;\n  gasPrice: number;\n\n  bestIncome: number; // temp data used for findBestPath algorithm\n  gasSpent: number; // temp data used for findBestPath algorithm\n  bestTotal: number; // temp data used for findBestPath algorithm\n  bestSource?: Edge; // temp data used for findBestPath algorithm\n  checkLine: number; // debug data\n\n  constructor(t: RToken) {\n    this.token = t;\n    this.edges = [];\n    this.price = 0;\n    this.gasPrice = 0;\n    this.bestIncome = 0;\n    this.gasSpent = 0;\n    this.bestTotal = 0;\n    this.bestSource = undefined;\n    this.checkLine = -1;\n  }\n\n  getNeibour(e?: Edge) {\n    if (!e) return;\n    return e.vert0 === this ? e.vert1 : e.vert0;\n  }\n}\n\nexport class Graph {\n  vertices: Vertice[];\n  edges: Edge[];\n  tokens: Map<RToken, Vertice>;\n\n  constructor(pools: Pool[], baseToken: RToken, gasPrice: number) {\n    this.vertices = [];\n    this.edges = [];\n    this.tokens = new Map();\n    pools.forEach((p) => {\n      const v0 = this.getOrCreateVertice(p.token0);\n      const v1 = this.getOrCreateVertice(p.token1);\n      const edge = new Edge(p, v0, v1);\n      v0.edges.push(edge);\n      v1.edges.push(edge);\n      this.edges.push(edge);\n    });\n    const baseVert = this.tokens.get(baseToken);\n    if (baseVert) {\n      this.setPrices(baseVert, 1, gasPrice);\n    }\n  }\n\n  setPrices(from: Vertice, price: number, gasPrice: number) {\n    if (from.price !== 0) return;\n    from.price = price;\n    from.gasPrice = gasPrice;\n    const edges = from.edges\n      .map((e): [Edge, number] => [e, parseInt(e.reserve(from).toString())])\n      .sort(([_1, r1], [_2, r2]) => r2 - r1);\n    edges.forEach(([e, _]) => {\n      const v = e.vert0 === from ? e.vert1 : e.vert0;\n      if (v.price !== 0) return;\n      let p = calcPrice(e.pool, 0, false);\n      if (from === e.vert0) p = 1 / p;\n      this.setPrices(v, price * p, gasPrice / p);\n    });\n  }\n\n  getOrCreateVertice(token: RToken) {\n    let vert = this.tokens.get(token);\n    if (vert) return vert;\n    vert = new Vertice(token);\n    this.vertices.push(vert);\n    this.tokens.set(token, vert);\n    return vert;\n  }\n\n  exportPath(from: RToken, to: RToken) {\n    //}, _route: MultiRoute) {\n    // const allPools = new Map<string, Pool>();\n    // this.edges.forEach(p => allPools.set(p.address, p));\n    // const usedPools = new Map<string, boolean>();\n    // route.legs.forEach(l => usedPools.set(l.address, l.token === allPools.get(l.address)?.token0))\n\n    const fromVert = this.tokens.get(from) as Vertice;\n    const toVert = this.tokens.get(to) as Vertice;\n    const initValue = (fromVert.bestIncome * fromVert.price) / toVert.price;\n\n    const route = new Set<Edge>();\n    for (\n      let v = toVert;\n      v !== fromVert;\n      v = v.getNeibour(v.bestSource) as Vertice\n    ) {\n      if (v.bestSource) route.add(v.bestSource);\n    }\n\n    function edgeStyle(e: Edge) {\n      const finish = e.vert1.bestSource === e;\n      const start = e.vert0.bestSource === e;\n      let label;\n      if (e.bestEdgeIncome === -1) label = 'label: \"low_liq\"';\n      if (e.bestEdgeIncome !== 0)\n        label = `label: \"${print(\n          (e.bestEdgeIncome / initValue - 1) * 100,\n          3\n        )}%\"`;\n      const edgeValue = route.has(e) ? \"value: 2\" : undefined;\n      let arrow;\n      if (finish && start) arrow = 'arrows: \"from,to\"';\n      if (finish) arrow = 'arrows: \"to\"';\n      if (start) arrow = 'arrows: \"from\"';\n      return [\"\", label, edgeValue, arrow]\n        .filter((a) => a !== undefined)\n        .join(\", \");\n    }\n\n    function print(n: number, digits: number) {\n      let out;\n      if (n === 0) out = \"0\";\n      else {\n        const n0 = n > 0 ? n : -n;\n        const shift = digits - Math.ceil(Math.log(n0) / Math.LN10);\n        if (shift <= 0) out = `${Math.round(n0)}`;\n        else {\n          const mult = Math.pow(10, shift);\n          out = `${Math.round(n0 * mult) / mult}`;\n        }\n        if (n < 0) out = -out;\n      }\n      return out;\n    }\n\n    function nodeLabel(v: Vertice) {\n      const value = (v.bestIncome * v.price) / toVert.price;\n      const income = `${print(value, 3)}`;\n      const total = `${print(v.bestTotal, 3)}`;\n      // const income = `${print((value/initValue-1)*100, 3)}%`\n      // const total = `${print((v.bestTotal/initValue-1)*100, 3)}%`\n      const checkLine = v.checkLine === -1 ? undefined : `${v.checkLine}`;\n      return [checkLine, income, total]\n        .filter((a) => a !== undefined)\n        .join(\":\");\n    }\n\n    const nodes = `var nodes = new vis.DataSet([\n      ${this.vertices\n        .map((t) => `{ id: ${t.token.name}, label: \"${nodeLabel(t)}\"}`)\n        .join(\",\\n\\t\\t\")}\n    ]);\\n`;\n    const edges = `var edges = new vis.DataSet([\n      ${this.edges\n        .map(\n          (p) =>\n            `{ from: ${p.vert0.token.name}, to: ${\n              p.vert1.token.name\n            }${edgeStyle(p)}}`\n        )\n        .join(\",\\n\\t\\t\")}\n    ]);\\n`;\n    const data = `var data = {\n        nodes: nodes,\n        edges: edges,\n    };\\n`;\n\n    // TODO: This should be removed, this pacakge will not be installable on a client while this remains.\n    const fs = require(\"fs\");\n    fs.writeFileSync(\n      \"D:/Info/Notes/GraphVisualization/data.js\",\n      nodes + edges + data\n    );\n  }\n\n  findBestPath(\n    from: RToken,\n    to: RToken,\n    amountIn: number\n  ):\n    | {\n        path: Edge[];\n        output: number;\n        gasSpent: number;\n        totalOutput: number;\n      }\n    | undefined {\n    const start = this.tokens.get(from);\n    const finish = this.tokens.get(to);\n    if (!start || !finish) return;\n\n    this.edges.forEach((e) => (e.bestEdgeIncome = 0));\n    this.vertices.forEach((v) => {\n      v.bestIncome = 0;\n      v.gasSpent = 0;\n      v.bestTotal = 0;\n      v.bestSource = undefined;\n      v.checkLine = -1;\n    });\n    start.bestIncome = amountIn;\n    start.bestTotal = amountIn;\n    const processedVert = new Set<Vertice>();\n    const nextVertList = [start]; // TODO: Use sorted Set!\n\n    let checkLine = 0;\n    for (;;) {\n      let closestVert: Vertice | undefined;\n      let closestTotal = -1;\n      let closestPosition = 0;\n      nextVertList.forEach((v, i) => {\n        if (v.bestTotal > closestTotal) {\n          closestTotal = v.bestTotal;\n          closestVert = v;\n          closestPosition = i;\n        }\n      });\n\n      if (!closestVert) return;\n\n      closestVert.checkLine = checkLine++;\n\n      if (closestVert === finish) {\n        const bestPath = [];\n        for (\n          let v: Vertice | undefined = finish;\n          v?.bestSource;\n          v = v.getNeibour(v.bestSource)\n        ) {\n          bestPath.unshift(v.bestSource);\n        }\n        return {\n          path: bestPath,\n          output: finish.bestIncome,\n          gasSpent: finish.gasSpent,\n          totalOutput: finish.bestTotal,\n        };\n      }\n      nextVertList.splice(closestPosition, 1);\n\n      closestVert.edges.forEach((e) => {\n        const v2 = closestVert === e.vert0 ? e.vert1 : e.vert0;\n        if (processedVert.has(v2)) return;\n        let newIncome, gas;\n        try {\n          [newIncome, gas] = e.calcOutput(\n            closestVert as Vertice,\n            (closestVert as Vertice).bestIncome\n          );\n        } catch (e) {\n          // Any arithmetic error or out-of-liquidity\n          return;\n        }\n        if (\n          e.checkMinimalLiquidityExceededAfterSwap(\n            closestVert as Vertice,\n            newIncome\n          )\n        ) {\n          e.bestEdgeIncome = -1;\n          return;\n        }\n        const newGasSpent = (closestVert as Vertice).gasSpent + gas;\n        const price = v2.price / finish.price;\n        const newTotal = newIncome * price - newGasSpent * finish.gasPrice;\n\n        console.assert(e.bestEdgeIncome === 0, \"Error 373\");\n        e.bestEdgeIncome = newIncome * price;\n\n        if (!v2.bestSource) nextVertList.push(v2);\n        if (!v2.bestSource || newTotal > v2.bestTotal) {\n          v2.bestIncome = newIncome;\n          v2.gasSpent = newGasSpent;\n          v2.bestTotal = newTotal;\n          v2.bestSource = e;\n        }\n      });\n      processedVert.add(closestVert);\n    }\n  }\n\n  addPath(from: Vertice | undefined, to: Vertice | undefined, path: Edge[]) {\n    let _from = from;\n    path.forEach((e) => {\n      if (_from) {\n        e.applySwap(_from);\n        _from = _from.getNeibour(e);\n      } else {\n        console.error(\"Unexpected 315\");\n      }\n    });\n\n    ASSERT(() => {\n      const res = this.vertices.every((v) => {\n        let total = 0;\n        let totalModule = 0;\n        v.edges.forEach((e) => {\n          if (e.vert0 === v) {\n            if (e.direction) {\n              total -= e.amountInPrevious;\n            } else {\n              total += e.amountInPrevious;\n            }\n            totalModule += e.amountInPrevious;\n          } else {\n            if (e.direction) {\n              total += e.amountOutPrevious;\n            } else {\n              total -= e.amountOutPrevious;\n            }\n            totalModule += e.amountOutPrevious;\n          }\n        });\n        if (v === from) return total <= 0;\n        if (v === to) return total >= 0;\n        if (totalModule === 0) return total === 0;\n        return Math.abs(total / totalModule) < 1e10;\n      });\n      return res;\n    }, \"Error 290\");\n  }\n\n  findBestRoute(\n    from: RToken,\n    to: RToken,\n    amountIn: number,\n    mode: number | number[]\n  ): MultiRoute {\n    let routeValues = [];\n    if (Array.isArray(mode)) {\n      const sum = mode.reduce((a, b) => a + b, 0);\n      routeValues = mode.map((e) => e / sum);\n    } else {\n      for (let i = 0; i < mode; ++i) routeValues.push(1 / mode);\n    }\n\n    this.edges.forEach((e) => {\n      e.amountInPrevious = 0;\n      e.amountOutPrevious = 0;\n      e.direction = true;\n    });\n    let output = 0;\n    let gasSpentInit = 0;\n    //let totalOutput = 0\n    let totalrouted = 0;\n    let step;\n    for (step = 0; step < routeValues.length; ++step) {\n      const p = this.findBestPath(from, to, amountIn * routeValues[step]);\n      if (!p) {\n        break;\n      } else {\n        output += p.output;\n        gasSpentInit += p.gasSpent;\n        //totalOutput += p.totalOutput\n        this.addPath(this.tokens.get(from), this.tokens.get(to), p.path);\n        totalrouted += routeValues[step];\n      }\n    }\n    if (step == 0)\n      return {\n        status: RouteStatus.NoWay,\n        amountIn: 0,\n        amountOut: 0,\n        legs: [],\n        gasSpent: 0,\n        totalAmountOut: 0,\n      };\n    let status;\n    if (step < routeValues.length) status = RouteStatus.Partial;\n    else status = RouteStatus.Success;\n\n    const fromVert = this.tokens.get(from) as Vertice;\n    const toVert = this.tokens.get(to) as Vertice;\n    const [legs, gasSpent, topologyWasChanged] = this.getRouteLegs(\n      fromVert,\n      toVert\n    );\n    console.assert(gasSpent <= gasSpentInit, \"Internal Error 491\");\n\n    if (topologyWasChanged) {\n      output = this.calcLegsAmountOut(legs, amountIn, to);\n    }\n\n    return {\n      status,\n      amountIn: amountIn * totalrouted,\n      amountOut: output,\n      legs,\n      gasSpent,\n      totalAmountOut: output - gasSpent * toVert.gasPrice,\n    };\n  }\n\n  getRouteLegs(from: Vertice, to: Vertice): [RouteLeg[], number, boolean] {\n    const [nodes, topologyWasChanged] = this.cleanTopology(from, to);\n    const legs: RouteLeg[] = [];\n    let gasSpent = 0;\n    nodes.forEach((n) => {\n      const outEdges = this.getOutputEdges(n).map((e) => {\n        const from = this.edgeFrom(e);\n        return from ? [e, from[0], from[1]] : [e];\n      });\n\n      let outAmount = outEdges.reduce((a, b) => a + (b[2] as number), 0);\n      if (outAmount <= 0) return;\n\n      const total = outAmount;\n      outEdges.forEach((e, i) => {\n        const p = e[2] as number;\n        const quantity = i + 1 === outEdges.length ? 1 : p / outAmount;\n        legs.push({\n          address: (e[0] as Edge).pool.address,\n          token: n.token,\n          swapPortion: quantity,\n          absolutePortion: p / total,\n        });\n        gasSpent += (e[0] as Edge).pool.swapGasCost;\n        outAmount -= p;\n      });\n      console.assert(outAmount / total < 1e-12, \"Error 281\");\n    });\n    return [legs, gasSpent, topologyWasChanged];\n  }\n\n  edgeFrom(e: Edge): [Vertice, number] | undefined {\n    if (e.amountInPrevious === 0) return undefined;\n    return e.direction\n      ? [e.vert0, e.amountInPrevious]\n      : [e.vert1, e.amountOutPrevious];\n  }\n\n  getOutputEdges(v: Vertice): Edge[] {\n    return v.edges.filter((e) => {\n      if (!e.canBeUsed) return false;\n      if (e.amountInPrevious === 0) return false;\n      if (e.direction !== (e.vert0 === v)) return false;\n      return true;\n    });\n  }\n\n  getInputEdges(v: Vertice): Edge[] {\n    return v.edges.filter((e) => {\n      if (!e.canBeUsed) return false;\n      if (e.amountInPrevious === 0) return false;\n      if (e.direction === (e.vert0 === v)) return false;\n      return true;\n    });\n  }\n\n  calcLegsAmountOut(legs: RouteLeg[], amountIn: number, to: RToken) {\n    const amounts = new Map<RToken, number>();\n    amounts.set(legs[0].token, amountIn);\n    legs.forEach((l) => {\n      const vert = this.tokens.get(l.token);\n      console.assert(vert !== undefined, \"Internal Error 570\");\n      const edge = (vert as Vertice).edges.find(\n        (e) => e.pool.address === l.address\n      );\n      console.assert(edge !== undefined, \"Internel Error 569\");\n      const pool = (edge as Edge).pool;\n      const direction = vert === (edge as Edge).vert0;\n\n      const inputTotal = amounts.get(l.token);\n      console.assert(inputTotal !== undefined, \"Internal Error 564\");\n      const input = (inputTotal as number) * l.swapPortion;\n      amounts.set(l.token, (inputTotal as number) - input);\n      const output = calcOutByIn(pool, input, direction);\n\n      const vertNext = (vert as Vertice).getNeibour(edge) as Vertice;\n      const prevAmount = amounts.get(vertNext.token);\n      amounts.set(vertNext.token, (prevAmount || 0) + output);\n    });\n    return amounts.get(to) || 0;\n  }\n\n  // removes all cycles if there are any, then removes all dead end could appear after cycle removing\n  // Returns clean result topologically sorted\n  cleanTopology(from: Vertice, to: Vertice): [Vertice[], boolean] {\n    let topologyWasChanged = false;\n    let result = this.topologySort(from, to);\n    if (result[0] !== 2) {\n      topologyWasChanged = true;\n      console.assert(result[0] === 0, \"Internal Error 554\");\n      while (result[0] === 0) {\n        this.removeWeakestEdge(result[1]);\n        result = this.topologySort(from, to);\n      }\n      if (result[0] === 3) {\n        this.removeDeadEnds(result[1]);\n        result = this.topologySort(from, to);\n      }\n      console.assert(result[0] === 2, \"Internal Error 563\");\n      if (result[0] !== 2) return [[], topologyWasChanged];\n    }\n    return [result[1], topologyWasChanged];\n  }\n\n  removeDeadEnds(verts: Vertice[]) {\n    verts.forEach((v) => {\n      this.getInputEdges(v).forEach((e) => {\n        e.canBeUsed = false;\n      });\n    });\n  }\n\n  removeWeakestEdge(verts: Vertice[]) {\n    let minVert: Vertice, minVertNext: Vertice;\n    let minOutput = Number.MAX_VALUE;\n    verts.forEach((v1, i) => {\n      const v2 = i === 0 ? verts[verts.length - 1] : verts[i - 1];\n      let out = 0;\n      this.getOutputEdges(v1).forEach((e) => {\n        if (v1.getNeibour(e) !== v2) return;\n        out += e.direction ? e.amountOutPrevious : e.amountInPrevious;\n      });\n      if (out < minOutput) {\n        minVert = v1;\n        minVertNext = v2;\n        minOutput = out;\n      }\n    });\n    // @ts-ignore\n    this.getOutputEdges(minVert).forEach((e) => {\n      if (minVert.getNeibour(e) !== minVertNext) return;\n      e.canBeUsed = false;\n    });\n  }\n\n  // topological sort\n  // if there is a cycle - returns [0, <List of envolved vertices in the cycle>]\n  // if there are no cycles but deadends- returns [3, <List of all envolved deadend vertices>]\n  // if there are no cycles or deadends- returns [2, <List of all envolved vertices topologically sorted>]\n  topologySort(from: Vertice, to: Vertice): [number, Vertice[]] {\n    // undefined or 0 - not processed, 1 - in process, 2 - finished, 3 - dedend\n    const vertState = new Map<Vertice, number>();\n    const vertsFinished: Vertice[] = [];\n    const foundCycle: Vertice[] = [];\n    const foundDeadEndVerts: Vertice[] = [];\n\n    const that = this;\n    // 0 - cycle was found and created, return\n    // 1 - during cycle creating\n    // 2 - vertex is processed ok\n    // 3 - dead end vertex\n    function topSortRecursive(current: Vertice): number {\n      const state = vertState.get(current);\n      if (state === 2 || state === 3) return state;\n      if (state === 1) {\n        console.assert(foundCycle.length == 0, \"Internal Error 566\");\n        foundCycle.push(current);\n        return 1;\n      }\n      vertState.set(current, 1);\n\n      let successors2Exist = false;\n      const outEdges = that.getOutputEdges(current);\n      for (let i = 0; i < outEdges.length; ++i) {\n        const e = outEdges[i];\n        const res = topSortRecursive(current.getNeibour(e) as Vertice);\n        if (res === 0) return 0;\n        if (res === 1) {\n          if (foundCycle[0] === current) return 0;\n          else {\n            foundCycle.push(current);\n            return 1;\n          }\n        }\n        if (res === 2) successors2Exist = true; // Ok successors\n      }\n      if (successors2Exist) {\n        console.assert(current !== to, \"Internal Error 589\");\n        vertsFinished.push(current);\n        vertState.set(current, 2);\n        return 2;\n      } else {\n        if (current !== to) {\n          foundDeadEndVerts.push(current);\n          vertState.set(current, 3);\n          return 3;\n        }\n        vertsFinished.push(current);\n        vertState.set(current, 2);\n        return 2;\n      }\n    }\n\n    const res = topSortRecursive(from);\n    if (res === 0) return [0, foundCycle];\n    if (foundDeadEndVerts.length) return [3, foundDeadEndVerts];\n    ASSERT(() => {\n      if (vertsFinished[0] !== to) return false;\n      if (vertsFinished[vertsFinished.length - 1] !== from) return false;\n      return true;\n    }, \"Internal Error 614\");\n    if (res === 2) return [2, vertsFinished.reverse()];\n    console.assert(true, \"Internal Error 612\");\n    return [1, []];\n  }\n}\n\nexport function findMultiRouting(\n  from: RToken,\n  to: RToken,\n  amountIn: number,\n  pools: Pool[],\n  baseToken: RToken,\n  gasPrice: number,\n  steps: number | number[] = 12\n): MultiRoute {\n  const g = new Graph(pools, baseToken, gasPrice);\n  const fromV = g.tokens.get(from);\n  if (fromV?.price === 0) {\n    g.setPrices(fromV, 1, 0);\n  }\n  const out = g.findBestRoute(from, to, amountIn, steps);\n  return out;\n}\n"],"names":["PoolType","Pool","_info","info","minLiquidity","swapGasCost","address","token0","token1","type","reserve0","reserve1","fee","RConstantProductPool","ConstantProduct","RHybridPool","Hybrid","A","RWeightedPool","Weighted","weight0","weight1","CL_MIN_TICK","CL_MAX_TICK","RConcentratedLiquidityPool","ConcentratedLiquidity","BigNumber","from","liquidity","sqrtPrice","nearestTick","ticks","RouteStatus","A_PRECISION","DCacheBN","Map","HybridComputeLiquidity","pool","res","get","undefined","r0","r1","isZero","set","s","add","nA","prevD","D","i","dP","mul","div","sub","abs","lte","HybridgetY","x","c","b","yPrev","y","calcOutByIn","amountIn","direction","xBN","yBN","parseInt","toString","wPool","weightRatio","actualIn","out","Math","pow","xNewBN","getBigNumber","yNewBN","dy","ConcentratedLiquidityOutByIn","OutOfLiquidity","Error","inAmount","length","index","unshift","DLiquidity","push","nextTickToCross","currentPrice","currentLiquidity","outAmount","input","nextTickPrice","sqrt","output","maxDx","maxDy","calcInByOut","amountOut","lt","round","console","error","calcPrice","takeFeeIntoAccount","oneMinusFee","hPool","ac4","Ds","calcInputByPriceConstantMean","price","t","calcInputByPrice","priceEffective","hint","revertPositive","ASSERT","f","closeValues","a","accuracy","calcSquareEquation","assert","sqrtD","min","max","x0","y0","e","valueBN","value","Number","MAX_SAFE_INTEGER","exp","floor","log","LN2","shift","mant","Edge","p","v0","v1","vert0","vert1","amountInPrevious","amountOutPrevious","canBeUsed","bestEdgeIncome","reserve","v","calcOutput","gas","GasConsumption","checkMinimalLiquidityExceededAfterSwap","MINIMUM_LIQUIDITY","testApply","inPrev","outPrev","to","getNeibour","directionNew","amountInNew","amountOutNew","inInc","outInc","inNew","outNew","calc","applySwap","bestIncome","Vertice","token","edges","gasPrice","gasSpent","bestTotal","bestSource","checkLine","Graph","pools","baseToken","vertices","tokens","forEach","getOrCreateVertice","edge","baseVert","setPrices","map","sort","r2","vert","exportPath","fromVert","toVert","initValue","route","Set","edgeStyle","finish","start","label","print","edgeValue","has","arrow","filter","join","n","digits","n0","ceil","LN10","mult","nodeLabel","income","total","nodes","name","data","fs","require","writeFileSync","findBestPath","processedVert","nextVertList","closestVert","closestTotal","closestPosition","bestPath","path","totalOutput","splice","v2","newIncome","newGasSpent","newTotal","addPath","_from","every","totalModule","findBestRoute","mode","routeValues","Array","isArray","sum","reduce","gasSpentInit","totalrouted","step","status","NoWay","legs","totalAmountOut","Partial","Success","getRouteLegs","topologyWasChanged","calcLegsAmountOut","cleanTopology","outEdges","getOutputEdges","edgeFrom","quantity","swapPortion","absolutePortion","getInputEdges","amounts","l","find","inputTotal","vertNext","prevAmount","result","topologySort","removeWeakestEdge","removeDeadEnds","verts","minVert","minVertNext","minOutput","MAX_VALUE","vertState","vertsFinished","foundCycle","foundDeadEndVerts","that","topSortRecursive","current","state","successors2Exist","reverse","findMultiRouting","steps","g","fromV"],"mappings":"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"}